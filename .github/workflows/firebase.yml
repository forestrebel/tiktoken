name: Firebase Integration Tests

on:
  push:
    branches: [ main, firebase-centric ]
    paths:
      - 'app/src/**'
      - 'test/**'
      - 'storage.rules'
      - 'firebase.json'
      - '.github/workflows/firebase.yml'
      - 'docker-compose*.yml'
      - 'Makefile'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/src/**'
      - 'test/**'
      - 'storage.rules'
      - 'firebase.json'
      - '.github/workflows/firebase.yml'
      - 'docker-compose*.yml'
      - 'Makefile'

env:
  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  FIREBASE_PROJECT_ID: demo-tiktoken
  CI: true
  NODE_ENV: test

jobs:
  test:
    name: Firebase Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Initialize environment
        run: |
          make firebase.init
          make firebase.setup

      - name: Start Firebase emulators
        run: make firebase.start

      - name: Verify emulator health
        run: make firebase.health

      - name: Run tests
        run: make test.ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: firebase-tests
          name: firebase-coverage
          fail_ci_if_error: true

      - name: Export test fixtures
        if: always()
        run: |
          mkdir -p test/fixtures
          docker-compose -f docker-compose.yml -f docker-compose.test.yml \
            exec -T firebase firebase emulators:export test/fixtures

      - name: Upload test fixtures
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-fixtures
          path: test/fixtures
          retention-days: 5

      - name: Upload test logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs
          path: |
            coverage/
            .nyc_output/
            test/fixtures/
          retention-days: 5

      - name: Cleanup
        if: always()
        run: |
          make clean
          docker builder prune -f

      - name: Generate Test Summary
        if: always()
        id: summary
        run: |
          echo "### Test Results :test_tube:" >> $GITHUB_STEP_SUMMARY
          echo "#### Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat coverage/coverage-summary.json | jq -r '.total | to_entries | .[] | "$(key): $(value.pct)%"' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          if [ -f test-report.json ]; then
            echo "#### Test Report" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '"Total: \(.numTotalTests)\nPassed: \(.numPassedTests)\nFailed: \(.numFailedTests)\nDuration: \(.testResults[].duration)ms"' test-report.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check Test Results
        if: always()
        run: |
          if [ -f test-report.json ]; then
            FAILED_TESTS=$(jq -r '.numFailedTests' test-report.json)
            if [ "$FAILED_TESTS" -gt 0 ]; then
              echo "::error::$FAILED_TESTS test(s) failed"
              exit 1
            fi
          fi

  notify:
    name: Notification
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check test status
        uses: technote-space/workflow-conclusion-action@v3

      - name: Send notification
        if: env.WORKFLOW_CONCLUSION == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ env.WORKFLOW_CONCLUSION }}
          SLACK_TITLE: 'Firebase Integration Tests'
          SLACK_MESSAGE: |
            Tests failed on branch ${{ github.ref_name }}
            
            See details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} 